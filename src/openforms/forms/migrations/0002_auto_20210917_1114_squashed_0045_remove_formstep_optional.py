# Generated by Django 3.2.15 on 2022-09-16 13:59

import re
import uuid
from collections import defaultdict
from itertools import chain
from typing import Set

import django.contrib.postgres.fields.jsonb
import django.core.validators
import django.db.migrations.operations.special
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models
from django.db.models import Prefetch, Q
from django.utils.html import format_html
from django.utils.translation import activate, deactivate_all, gettext as _

import privates.fields
import privates.storages
import tinymce.models
from glom import glom

import csp_post_processor.fields
import openforms.forms.models.form_variable
import openforms.forms.models.form_version
import openforms.forms.validators
import openforms.utils.files
import openforms.utils.validators
from openforms.authentication.registry import register as auth_register
from openforms.formio.rendering.constants import RenderConfigurationOptions
from openforms.formio.utils import iter_components
from openforms.forms.constants import SubmissionAllowedChoices
from openforms.forms.models.form_definition import _get_number_of_components
from openforms.utils.json_logic import JsonLogicTest
from openforms.variables.constants import FormVariableSources
from openforms.variables.utils import check_initial_value

# openforms.forms.migrations.0044_fix_user_defined_vars_initial_value


def transfer_can_submit_forwards_func(apps, schema_editor):
    Form = apps.get_model("forms", "Form")
    forms = Form.objects.all()

    for form in forms:
        if form.can_submit:
            form.submission_allowed = SubmissionAllowedChoices.yes
        else:
            form.submission_allowed = SubmissionAllowedChoices.no_with_overview
    Form.objects.bulk_update(forms, ["submission_allowed"])


def transfer_can_submit_backwards_func(apps, schema_editor):
    Form = apps.get_model("forms", "Form")
    forms = Form.objects.all()

    for form in forms:
        if form.submission_allowed != SubmissionAllowedChoices.yes:
            form.can_submit = False
        else:
            form.can_submit = True
    Form.objects.bulk_update(forms, ["can_submit"])


def remove_html5_widget_from_forms(apps, schema_editor):
    FormDefinition = apps.get_model("forms", "FormDefinition")

    form_definitions = FormDefinition.objects.all()
    for form_definition in form_definitions:
        for component in iter_components(form_definition.configuration):
            if component["type"] == "select" and component["widget"] == "html5":
                component["widget"] = "choicesjs"

    FormDefinition.objects.bulk_update(form_definitions, ["configuration"])


def file_component_forwards_func(apps, schema_editor):
    FormDefinition = apps.get_model("forms", "FormDefinition")
    for form_definition in FormDefinition.objects.all():
        changed = False
        for component in iter_components(form_definition.configuration):
            if component["type"] == "file":
                image = component.get("image")
                of_ns = component.get("of")
                if not of_ns and isinstance(image, dict):
                    # we move the 'image' dict a level deeper into 'of' prefix
                    component["of"] = {"image": image}
                    # set the original 'image' property
                    component["image"] = False
                    changed = True

        if changed:
            form_definition.save()


def migrate_kvk_prefill_from_hoofdvestiging_to_basisprofiel(apps, _):
    FormDefinition = apps.get_model("forms", "FormDefinition")

    # add the `embedded.hoofdVestiging` prefix for KVK prefills
    for form_definition in FormDefinition.objects.all():
        for component in iter_components(form_definition.configuration, recursive=True):
            plugin_id = glom(component, "prefill.plugin", default=None)
            attribute = glom(component, "prefill.attribute", default=None)
            if plugin_id != "kvk-kvknumber":
                continue

            if not attribute:
                continue

            # these are lifted from the API schema in a custom fashion and don't need the
            # prefix, see the plugin code
            if attribute.startswith("bezoekadres.") or attribute.startswith(
                "correspondentieadres."
            ):
                continue

            new_attribute = f"_embedded.hoofdvestiging.{attribute}"
            component["prefill"]["attribute"] = new_attribute
        form_definition.save(update_fields=["configuration"])


def migrate_kvk_prefill_from_basisprofiel_to_hoofdvestiging(apps, _):
    FormDefinition = apps.get_model("forms", "FormDefinition")

    # remove the `embedded.hoofdVestiging` prefix for KVK prefills
    for form_definition in FormDefinition.objects.all():
        for component in iter_components(form_definition.configuration, recursive=True):
            plugin_id = glom(component, "prefill.plugin", default=None)
            attribute = glom(component, "prefill.attribute", default=None)
            if plugin_id != "kvk-kvknumber":
                continue

            if not attribute:
                continue

            new_attribute = attribute.replace("_embedded.hoofdvestiging.", "", 1)
            component["prefill"]["attribute"] = new_attribute
        form_definition.save(update_fields=["configuration"])


defaults = {
    RenderConfigurationOptions.show_in_summary: True,
    RenderConfigurationOptions.show_in_pdf: True,
}


def update_configuration(component: dict) -> bool:
    key = RenderConfigurationOptions.show_in_confirmation_email
    if key not in component:
        return False

    modified = False
    for option, default_value in defaults.items():
        # skip if it's defined already
        if option in component:
            continue

        component[option] = default_value
        modified = True

    return modified


def add_missing_show_in_FOO_options(apps, _):
    FormDefinition = apps.get_model("forms", "FormDefinition")
    for form_def in FormDefinition.objects.all():
        if not form_def.configuration:
            continue

        is_modified = False
        for component in iter_components(form_def.configuration, recursive=True):
            is_modified = update_configuration(component)

        if is_modified:
            form_def.save(update_fields=["configuration"])


def find_component_keys(test: JsonLogicTest, candidates: list) -> Set[str]:
    keys_used = set()

    for value in test.values:
        if isinstance(value, JsonLogicTest) and value.operator == "var":
            candidate = value.values[0]
            if candidate in candidates:
                keys_used.add(candidate)
        elif isinstance(value, JsonLogicTest) and value.operator == "date":
            keys_used |= find_component_keys(value, candidates=candidates)

        elif isinstance(value, JsonLogicTest):
            keys_used |= find_component_keys(value, candidates=candidates)

    return keys_used


def make_logic_order_explicit(apps, schema_editor):
    """
    Set an explicit order value for logic rules, per form.

    Since there was no explicit ordering beforehand, we apply the following logic:

    1. Simple rules: introspect the trigger and check which key it is for
        1. Look up the key in the form components
        2. Derive which form step the key belongs to
        3. Order based on form step order
        4. Within a form step, order on component hierarchy, depth first (i.e. we fetch
           child components before stepping to siblings.
        5. If still ambiguous, order by PK
    2. Simple rules that failed introspection
    3. Advanced rules: order by PK
    """
    Form = apps.get_model("forms", "Form")
    FormLogic = apps.get_model("forms", "FormLogic")

    objects = []
    for form in Form.objects.prefetch_related("formlogic_set"):
        logic_without_vars = []
        logic_with_vars = []

        # track which key belongs to which form step
        key_to_step_map = {}
        # list of keys in depth-first order for every form step
        depth_first_ordered_keys = defaultdict(list)

        for form_step in form.formstep_set.select_related("form_definition"):
            _keys = []

            for component in iter_components(
                form_step.form_definition.configuration, recursive=True
            ):
                if not (key := component.get("key")):
                    continue
                _keys.append(key)
                key_to_step_map[key] = form_step

            depth_first_ordered_keys[form_step] = _keys

        # introspect the logic
        for form_logic in form.formlogic_set.all():
            logic_test = JsonLogicTest.from_expression(form_logic.json_logic_trigger)
            component_keys = find_component_keys(
                logic_test, candidates=list(key_to_step_map)
            )

            if not component_keys:
                logic_without_vars.append(form_logic)
                continue

            steps_used = sorted(
                {key_to_step_map[key] for key in component_keys},
                key=lambda step: step.order,
            )
            logic_with_vars.append((steps_used, component_keys, form_logic))

        def logic_with_vars_sort_key(logic_tuple):
            steps_used, component_keys, form_logic = logic_tuple
            key_indices_by_step = defaultdict(set)

            for key in component_keys:
                step = key_to_step_map[key]
                key_indices_by_step[step].add(depth_first_ordered_keys[step].index(key))

            steps_and_keys = []
            for step in steps_used:
                key_indices = sorted(key_indices_by_step[step])
                steps_and_keys.append((step.order, tuple(key_indices)))

            return (tuple(steps_and_keys), form_logic.id)

        # process the ordering of simple logics
        sorted_logic_with_vars = [
            form_logic
            for (_, _, form_logic) in sorted(
                logic_with_vars, key=logic_with_vars_sort_key
            )
        ]
        # process ambiguous_simple_logics
        sorted_logic_without_vars = sorted(
            logic_without_vars, key=lambda logic: logic.id
        )

        for order, form_logic in enumerate(
            chain(
                sorted_logic_without_vars,
                sorted_logic_with_vars,
            )
        ):
            # only update what needs to be changed
            if order == form_logic.order:
                continue
            form_logic.order = order
            objects.append(form_logic)

    FormLogic.objects.bulk_update(objects, fields=["order"])


def create_form_variables_for_form(apps, schema_editor):
    Form = apps.get_model("forms", "Form")
    FormVariable = apps.get_model("forms", "FormVariable")

    # Get the ids of the forms already related to form variables
    forms_with_form_variables_id = (
        FormVariable.objects.all().values_list("form__id", flat=True).distinct()
    )

    forms_without_form_variables = Form.objects.filter(
        ~Q(id__in=forms_with_form_variables_id)
    )

    for form in forms_without_form_variables:
        FormVariable.objects.create_for_form(form)


def remove_static_form_variables(apps, schema_editor):
    FormVariable = apps.get_model("forms", "FormVariable")

    FormVariable.objects.filter(source="static").delete()


def remove_component_variables_without_definition(apps, schema_editor):
    FormVariable = apps.get_model("forms", "FormVariable")

    FormVariable.objects.filter(
        form_definition__isnull=True, source=FormVariableSources.component
    ).delete()


def set_number_of_components(apps, _):
    FormDefinition = apps.get_model("forms", "FormDefinition")
    for fd in FormDefinition.objects.exclude(configuration=None).filter(
        _num_components=0
    ):
        fd._num_components = _get_number_of_components(fd)
        fd.save(update_fields=["_num_components"])


def convert_action_type_value_into_variable(apps, _):
    FormLogic = apps.get_model("forms", "FormLogic")
    for rule in FormLogic.objects.iterator():
        has_changes = False
        for action in rule.actions:
            if action["action"]["type"] != "value":
                continue

            has_changes = True
            # both are component keys, so we can simply map them
            action["variable"] = action["component"]
            action["component"] = ""
            action["action"]["type"] = "variable"

        if has_changes:
            rule.save(update_fields=["actions"])


def convert_action_type_variable_into_value(apps, _):
    FormLogic = apps.get_model("forms", "FormLogic")
    for rule in FormLogic.objects.iterator():
        component_keys = rule.form.formvariable_set.filter(
            source="component"
        ).values_list("key", flat=True)
        has_changes = False
        for action in rule.actions:
            if action["action"]["type"] != "variable":
                continue

            if (variable_key := action["variable"]) not in component_keys:
                continue

            has_changes = True
            action["component"] = variable_key
            action["variable"] = ""
            action["action"]["type"] = "value"

        if has_changes:
            rule.save(update_fields=["actions"])


def append_explanation_template_message(apps, schema_editor):
    activate(settings.LANGUAGE_CODE)

    Form = apps.get_model("forms", "Form")
    FormStep = apps.get_model("forms", "FormStep")

    for form in Form.objects.prefetch_related(
        Prefetch(
            "formstep_set",
            queryset=FormStep.objects.select_related("form_definition"),
        )
    ):
        plugins = form.authentication_backends
        login_options_count = len(
            [plugin_id for plugin_id in plugins if plugin_id in auth_register]
        )
        can_login = login_options_count > 0
        form_login_required = any(
            form_step.form_definition.login_required
            for form_step in form.formstep_set.all()
        )

        if form_login_required:
            message = _("Please authenticate to start the form.")
        elif can_login:
            message = _("Please authenticate or start the form anonymously.")
        else:
            message = _("Please click the button below to start the form.")

        form.explanation_template += format_html("<p>{}</p>", message)
        form.save()

    deactivate_all()


def check_user_defined_variables_initial_value(apps, schema_editor):
    FormVariable = apps.get_model("forms", "FormVariable")

    user_defined_vars = FormVariable.objects.filter(
        source=FormVariableSources.user_defined
    )

    variables_to_update = []
    for variable in user_defined_vars:
        initial_value = check_initial_value(variable.initial_value, variable.data_type)
        if initial_value != variable.initial_value:
            variable.initial_value = initial_value
            variables_to_update.append(variable)

    FormVariable.objects.bulk_update(variables_to_update, fields=["initial_value"])


class Migration(migrations.Migration):

    replaces = [
        ("forms", "0002_auto_20210917_1114"),
        ("forms", "0003_auto_20210930_1156"),
        ("forms", "0004_auto_20211111_1614"),
        ("forms", "0005_form_confirmation_email_option"),
        ("forms", "0006_formpricelogic"),
        ("forms", "0007_form_explanation_template"),
        ("forms", "0008_form_submission_allowed"),
        ("forms", "0009_transfer_can_submit"),
        ("forms", "0010_remove_form_can_submit"),
        ("forms", "0011_formlogic_is_advanced"),
        ("forms", "0008_auto_20211216_1639"),
        ("forms", "0012_merge_20211222_0831"),
        ("forms", "0013_auto_20211220_1755"),
        ("forms", "0014_file_component"),
        ("forms", "0015_auto_20220114_1006"),
        ("forms", "0016_auto_20220201_1213"),
        ("forms", "0017_auto_20220215_1715"),
        ("forms", "0018_auto_20220221_1405"),
        ("forms", "0006_form_display_main_website_link"),
        ("forms", "0019_merge_20220228_1207"),
        ("forms", "0020_migrate_kvk_prefill"),
        ("forms", "0021_form_auto_login_authentication_backend"),
        ("forms", "0022_formsexport"),
        ("forms", "0023_add_show_in_FOO_defaults"),
        ("forms", "0024_formvariable"),
        ("forms", "0025_formvariable_valid_prefill_configuration"),
        ("forms", "0025_auto_20220524_1022"),
        ("forms", "0026_merge_20220610_1302"),
        ("forms", "0027_alter_formvariable_key"),
        ("forms", "0028_auto_20220623_1257"),
        ("forms", "0029_make_logic_order_explicit"),
        ("forms", "0030_alter_formlogic_options"),
        ("forms", "0028_auto_20220628_0923"),
        ("forms", "0031_merge_20220629_0955"),
        ("forms", "0032_alter_formvariable_managers"),
        ("forms", "0033_formvariable_datamigration"),
        ("forms", "0032_formlogic_trigger_from_step"),
        ("forms", "0034_merge_20220708_1038"),
        ("forms", "0035_auto_20220725_0918"),
        ("forms", "0036_alter_formvariable_source"),
        ("forms", "0037_remove_invalid_component_vars"),
        ("forms", "0038_formvariable_form_definition_not_null_for_component_vars"),
        ("forms", "0039_formdefinition__num_components"),
        ("forms", "0040_set_number_of_formio_components"),
        ("forms", "0041_convert_logic_action_type_value_to_variable"),
        ("forms", "0042_alter_formdefinition_configuration"),
        ("forms", "0043_explanation_template_data_migration"),
        ("forms", "0044_fix_user_defined_vars_initial_value"),
        ("forms", "0045_remove_formstep_optional"),
    ]

    dependencies = [
        ("forms", "0001_initial_squashed_0037_merge_20210903_1213"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name="formdefinition",
            name="internal_name",
            field=models.CharField(
                blank=True,
                help_text="internal name for management purposes",
                max_length=50,
                verbose_name="internal name",
            ),
        ),
        migrations.AddField(
            model_name="form",
            name="internal_name",
            field=models.CharField(
                blank=True,
                help_text="internal name for management purposes",
                max_length=150,
                verbose_name="internal name",
            ),
        ),
        migrations.AlterField(
            model_name="form",
            name="name",
            field=models.CharField(max_length=150, verbose_name="name"),
        ),
        migrations.AlterField(
            model_name="form",
            name="uuid",
            field=models.UUIDField(
                default=uuid.uuid4, unique=True, verbose_name="UUID"
            ),
        ),
        migrations.AlterField(
            model_name="formdefinition",
            name="uuid",
            field=models.UUIDField(
                default=uuid.uuid4, unique=True, verbose_name="UUID"
            ),
        ),
        migrations.AlterField(
            model_name="formstep",
            name="uuid",
            field=models.UUIDField(
                default=uuid.uuid4, unique=True, verbose_name="UUID"
            ),
        ),
        migrations.AlterField(
            model_name="formversion",
            name="uuid",
            field=models.UUIDField(
                default=uuid.uuid4, unique=True, verbose_name="UUID"
            ),
        ),
        migrations.AddField(
            model_name="form",
            name="confirmation_email_option",
            field=models.CharField(
                choices=[
                    ("form_specific_email", "Form specific email"),
                    ("global_email", "Global email"),
                    ("no_email", "No email"),
                ],
                default="global_email",
                max_length=20,
                verbose_name="confirmation email option",
            ),
        ),
        migrations.CreateModel(
            name="FormPriceLogic",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, unique=True, verbose_name="UUID"
                    ),
                ),
                (
                    "json_logic_trigger",
                    django.contrib.postgres.fields.jsonb.JSONField(
                        help_text='JSON logic expression that must evaluate to "true" for the price to apply.',
                        verbose_name="JSON logic",
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=2, max_digits=10, verbose_name="price"
                    ),
                ),
                (
                    "form",
                    models.ForeignKey(
                        help_text="Form to which the pricing JSON logic applies.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="forms.form",
                    ),
                ),
            ],
            options={
                "verbose_name": "form price rule",
                "verbose_name_plural": "form price rules",
            },
        ),
        migrations.AddField(
            model_name="form",
            name="explanation_template",
            field=tinymce.models.HTMLField(
                blank=True,
                help_text="Content that will be shown on the start page of the form, below the title and above the log in text.",
                verbose_name="explanation template",
            ),
        ),
        migrations.AddField(
            model_name="form",
            name="submission_allowed",
            field=models.CharField(
                choices=[
                    ("yes", "Yes"),
                    ("no_with_overview", "No (with overview page)"),
                    ("no_without_overview", "No (without overview page)"),
                ],
                default="yes",
                help_text="Whether the user is allowed to submit this form or not, and whether the overview page should be shown if they are not.",
                max_length=100,
                verbose_name="submission allowed",
            ),
        ),
        migrations.RunPython(
            code=transfer_can_submit_forwards_func,
            reverse_code=transfer_can_submit_backwards_func,
        ),
        migrations.RemoveField(
            model_name="form",
            name="can_submit",
        ),
        migrations.AddField(
            model_name="formlogic",
            name="is_advanced",
            field=models.BooleanField(
                default=False,
                help_text="Is this an advanced rule (the admin user manually wrote the trigger as JSON)?",
                verbose_name="is advanced",
            ),
        ),
        migrations.AlterField(
            model_name="form",
            name="submission_confirmation_template",
            field=tinymce.models.HTMLField(
                blank=True,
                help_text="The content of the submission confirmation page. It can contain variables that will be templated from the submitted form data. If not specified, the global template will be used.",
                validators=[openforms.utils.validators.DjangoTemplateValidator()],
                verbose_name="submission confirmation template",
            ),
        ),
        migrations.RunPython(
            code=remove_html5_widget_from_forms,
            reverse_code=migrations.RunPython.noop,
        ),
        migrations.RunPython(
            code=file_component_forwards_func, reverse_code=migrations.RunPython.noop
        ),
        migrations.AlterModelOptions(
            name="formstep",
            options={
                "ordering": ("order",),
                "verbose_name": "form step",
                "verbose_name_plural": "form steps",
            },
        ),
        migrations.AlterField(
            model_name="form",
            name="explanation_template",
            field=csp_post_processor.fields.CSPPostProcessedWYSIWYGField(
                base_field=tinymce.models.HTMLField(
                    blank=True,
                    help_text="Content that will be shown on the start page of the form, below the title and above the log in text.",
                    verbose_name="explanation template",
                ),
                blank=True,
                help_text="Content that will be shown on the start page of the form, below the title and above the log in text.",
                verbose_name="explanation template",
            ),
        ),
        migrations.AlterField(
            model_name="form",
            name="payment_backend_options",
            field=models.JSONField(
                blank=True,
                default=dict,
                null=True,
                verbose_name="payment backend options",
            ),
        ),
        migrations.AlterField(
            model_name="form",
            name="registration_backend_options",
            field=models.JSONField(
                blank=True,
                default=dict,
                null=True,
                verbose_name="registration backend options",
            ),
        ),
        migrations.AlterField(
            model_name="formdefinition",
            name="configuration",
            field=models.JSONField(
                help_text="The form definition as Form.io JSON schema",
                verbose_name="Form.io configuration",
            ),
        ),
        migrations.AlterField(
            model_name="formlogic",
            name="actions",
            field=models.JSONField(
                help_text="Which action(s) to perform if the JSON logic evaluates to true.",
                verbose_name="actions",
            ),
        ),
        migrations.AlterField(
            model_name="formlogic",
            name="json_logic_trigger",
            field=models.JSONField(
                help_text="JSON logic associated with a step in a form.",
                verbose_name="JSON logic",
            ),
        ),
        migrations.AlterField(
            model_name="formpricelogic",
            name="json_logic_trigger",
            field=models.JSONField(
                help_text='JSON logic expression that must evaluate to "true" for the price to apply.',
                verbose_name="JSON logic",
            ),
        ),
        migrations.AlterField(
            model_name="formversion",
            name="export_blob",
            field=models.JSONField(
                help_text="The form, form definitions and form steps that make up this version, saved as JSON data."
            ),
        ),
        migrations.AddField(
            model_name="formversion",
            name="description",
            field=models.TextField(
                blank=True,
                help_text="Description/context about this particular version.",
                verbose_name="version description",
            ),
        ),
        migrations.AddField(
            model_name="formversion",
            name="user",
            field=models.ForeignKey(
                help_text="User who authored this version.",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to=settings.AUTH_USER_MODEL,
                verbose_name="user",
            ),
        ),
        migrations.AddField(
            model_name="form",
            name="display_main_website_link",
            field=models.BooleanField(
                default=True,
                help_text="Display the link to the main website on the submission confirmation page.",
                verbose_name="display main website link",
            ),
        ),
        migrations.RunPython(
            code=migrate_kvk_prefill_from_hoofdvestiging_to_basisprofiel,
            reverse_code=migrate_kvk_prefill_from_basisprofiel_to_hoofdvestiging,
        ),
        migrations.AddField(
            model_name="form",
            name="auto_login_authentication_backend",
            field=models.CharField(
                blank=True, max_length=100, verbose_name="automatic login"
            ),
        ),
        migrations.CreateModel(
            name="FormsExport",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, unique=True, verbose_name="UUID"
                    ),
                ),
                (
                    "export_content",
                    privates.fields.PrivateMediaFileField(
                        help_text="Zip file containing all the exported forms.",
                        storage=privates.storages.PrivateMediaFileSystemStorage(),
                        upload_to="exports/%Y/%m/%d",
                        verbose_name="export content",
                    ),
                ),
                (
                    "datetime_requested",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="The date and time on which the bulk export was requested.",
                        verbose_name="date time requested",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="The user that requested the download.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="user",
                    ),
                ),
            ],
            options={
                "verbose_name": "forms export",
                "verbose_name_plural": "forms exports",
            },
            bases=(openforms.utils.files.DeleteFileFieldFilesMixin, models.Model),
        ),
        migrations.RunPython(
            code=add_missing_show_in_FOO_options,
            reverse_code=migrations.RunPython.noop,
        ),
        migrations.CreateModel(
            name="FormVariable",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the variable",
                        max_length=100,
                        verbose_name="name",
                    ),
                ),
                (
                    "key",
                    models.SlugField(
                        help_text="Key of the variable, should be unique with the form.",
                        max_length=100,
                        verbose_name="key",
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        choices=[
                            ("component", "Component"),
                            ("user_defined", "User defined"),
                            ("static", "Static"),
                        ],
                        help_text="Where will the data that will be associated with this variable come from",
                        max_length=50,
                        verbose_name="source",
                    ),
                ),
                (
                    "prefill_plugin",
                    models.CharField(
                        blank=True,
                        help_text="Which, if any, prefill plugin should be used",
                        max_length=50,
                        verbose_name="prefill plugin",
                    ),
                ),
                (
                    "prefill_attribute",
                    models.CharField(
                        blank=True,
                        help_text="Which attribute from the prefill response should be used to fill this variable",
                        max_length=50,
                        verbose_name="prefill attribute",
                    ),
                ),
                (
                    "data_type",
                    models.CharField(
                        choices=[
                            ("string", "String"),
                            ("boolean", "Boolean"),
                            ("object", "Object"),
                            ("array", "Array"),
                            ("int", "Integer"),
                            ("float", "Float"),
                            ("datetime", "Datetime"),
                            ("time", "Time"),
                        ],
                        help_text="The type of the value that will be associated with this variable",
                        max_length=50,
                        verbose_name="data type",
                    ),
                ),
                (
                    "data_format",
                    models.CharField(
                        blank=True,
                        help_text="The format of the value that will be associated with this variable",
                        max_length=250,
                        verbose_name="data format",
                    ),
                ),
                (
                    "is_sensitive_data",
                    models.BooleanField(
                        default=False,
                        help_text="Will this variable be associated with sensitive data?",
                        verbose_name="is sensitive data",
                    ),
                ),
                (
                    "initial_value",
                    models.JSONField(
                        blank=True,
                        help_text="The initial value for this field",
                        null=True,
                        verbose_name="initial value",
                    ),
                ),
                (
                    "form",
                    models.ForeignKey(
                        help_text="Form to which this variable is related",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="forms.form",
                        verbose_name="form",
                    ),
                ),
                (
                    "form_definition",
                    models.ForeignKey(
                        blank=True,
                        help_text="Form definition to which this variable is related. This is kept as metadata",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="forms.formdefinition",
                        verbose_name="form definition",
                    ),
                ),
            ],
            options={
                "verbose_name": "Form variable",
                "verbose_name_plural": "Form variables",
                "unique_together": {("form", "key")},
            },
        ),
        migrations.AddConstraint(
            model_name="formvariable",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        models.Q(("prefill_plugin", ""), ("prefill_attribute", "")),
                        models.Q(
                            models.Q(("prefill_plugin", ""), _negated=True),
                            models.Q(("prefill_attribute", ""), _negated=True),
                        ),
                        _connector="OR",
                    )
                ),
                name="prefill_config_empty_or_complete",
            ),
        ),
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("path", models.CharField(max_length=255, unique=True)),
                ("depth", models.PositiveIntegerField()),
                ("numchild", models.PositiveIntegerField(default=0)),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, unique=True, verbose_name="UUID"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Human readable name",
                        max_length=64,
                        verbose_name="name",
                    ),
                ),
            ],
            options={
                "verbose_name": "category",
                "verbose_name_plural": "categories",
            },
        ),
        migrations.AddField(
            model_name="form",
            name="category",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="forms.category",
            ),
        ),
        migrations.AlterField(
            model_name="formvariable",
            name="key",
            field=models.CharField(
                help_text="Key of the variable, should be unique with the form.",
                max_length=100,
                validators=[
                    django.core.validators.RegexValidator(
                        message="Invalid variable key. It must only contain alphanumeric characters, underscores, dots and dashes and should not be ended by dash or dot.",
                        regex=re.compile("^\\w[\\w.\\-]*\\w$"),
                    )
                ],
                verbose_name="key",
            ),
        ),
        migrations.AlterModelOptions(
            name="formlogic",
            options={"ordering": ("order",)},
        ),
        migrations.AddField(
            model_name="formlogic",
            name="order",
            field=models.PositiveIntegerField(
                db_index=True, default=0, editable=False, verbose_name="order"
            ),
            preserve_default=False,
        ),
        migrations.RunPython(
            code=make_logic_order_explicit, reverse_code=migrations.RunPython.noop
        ),
        migrations.AlterModelOptions(
            name="formlogic",
            options={
                "ordering": ("order",),
                "verbose_name": "form logic",
                "verbose_name_plural": "form logic rules",
            },
        ),
        migrations.AlterField(
            model_name="formvariable",
            name="key",
            field=models.TextField(
                help_text="Key of the variable, should be unique with the form.",
                validators=[
                    django.core.validators.RegexValidator(
                        message="Invalid variable key. It must only contain alphanumeric characters, underscores, dots and dashes and should not be ended by dash or dot.",
                        regex=re.compile("^\\w[\\w.\\-]*\\w$"),
                    )
                ],
                verbose_name="key",
            ),
        ),
        migrations.AlterField(
            model_name="formvariable",
            name="name",
            field=models.TextField(
                help_text="Name of the variable", verbose_name="name"
            ),
        ),
        migrations.AlterModelManagers(
            name="formvariable",
            managers=[
                ("objects", openforms.forms.models.form_variable.FormVariableManager()),
            ],
        ),
        # this operation is taken from forms.0053_alter_formvariable_prefill_attribute as
        # it is required for the data migration to succeed
        migrations.SeparateDatabaseAndState(
            state_operations=[],
            database_operations=[
                migrations.AlterField(
                    model_name="formvariable",
                    name="prefill_attribute",
                    field=models.CharField(blank=True, max_length=200),
                ),
            ],
        ),
        migrations.RunPython(
            code=create_form_variables_for_form,
            reverse_code=migrations.RunPython.noop,
        ),
        migrations.AddField(
            model_name="formlogic",
            name="trigger_from_step",
            field=models.ForeignKey(
                blank=True,
                help_text="When set, the trigger will only be checked once the specified step is reached. This means the rule will never trigger for steps before the specified trigger step. If unset, the trigger will always be checked.",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="forms.formstep",
                verbose_name="trigger from step",
            ),
        ),
        migrations.AddField(
            model_name="formversion",
            name="app_git_sha",
            field=models.CharField(
                blank=True,
                default=openforms.forms.models.form_version.get_app_git_sha,
                editable=False,
                help_text="Application commit hash at the time this version was created.",
                max_length=50,
                verbose_name="application commit hash",
            ),
        ),
        migrations.AddField(
            model_name="formversion",
            name="app_release",
            field=models.CharField(
                blank=True,
                default=openforms.forms.models.form_version.get_app_release,
                editable=False,
                help_text="App release/version at the time this version was created.",
                max_length=50,
                verbose_name="application version",
            ),
        ),
        migrations.RunPython(
            code=remove_static_form_variables,
            reverse_code=migrations.RunPython.noop,
        ),
        migrations.AlterField(
            model_name="formvariable",
            name="source",
            field=models.CharField(
                choices=[("component", "Component"), ("user_defined", "User defined")],
                help_text="Where will the data that will be associated with this variable come from",
                max_length=50,
                verbose_name="source",
            ),
        ),
        migrations.RunPython(
            code=remove_component_variables_without_definition,
            reverse_code=migrations.RunPython.noop,
        ),
        migrations.AddConstraint(
            model_name="formvariable",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        models.Q(
                            ("form_definition__isnull", True),
                            models.Q(("source", "component"), _negated=True),
                        ),
                        ("form_definition__isnull", False),
                        _connector="OR",
                    )
                ),
                name="form_definition_not_null_for_component_vars",
            ),
        ),
        migrations.AddField(
            model_name="formdefinition",
            name="_num_components",
            field=models.PositiveIntegerField(
                default=0,
                help_text="The total number of Formio components used in the configuration",
                verbose_name="number of Formio components",
            ),
        ),
        migrations.RunPython(
            code=set_number_of_components,
            reverse_code=migrations.RunPython.noop,
        ),
        migrations.RunPython(
            code=convert_action_type_value_into_variable,
            reverse_code=convert_action_type_variable_into_value,
        ),
        migrations.AlterField(
            model_name="formdefinition",
            name="configuration",
            field=models.JSONField(
                help_text="The form definition as Form.io JSON schema",
                validators=[openforms.forms.validators.validate_template_expressions],
                verbose_name="Form.io configuration",
            ),
        ),
        migrations.RunPython(
            code=append_explanation_template_message,
            reverse_code=migrations.RunPython.noop,
        ),
        migrations.RunPython(
            code=check_user_defined_variables_initial_value,
            reverse_code=migrations.RunPython.noop,
        ),
        migrations.RemoveField(
            model_name="formstep",
            name="optional",
        ),
    ]
